breaks=c(1,2,3), labels=c('0-14', '15-64', '65+'))
}
Age_distribution_plot('South Africa')
Age_distribution_plot <- function(country_,age_dist=age_dist) {
# create data
x <- age_dist[age_dist$`Country Name`==country_,]
x <- data.frame(rbind(rbind(
cbind(value=x$`00-14`, group=1),
cbind(value=x$`15-64`, group=2)
),
cbind(value=x$`65+`, group=3)))
ggplot(x, aes(x=group, y=value)) +
geom_point(size=3, col=colour_cases) +
geom_segment(aes(x=group, xend=group, y=0, yend=value), col=colour_cases) +
stat_smooth(geom='line', col=colour_cases) +
theme_minimal() + xlab('Age') + ylab('Percent of Population') + ggtitle(paste('Age Distribution of', country_)) +
scale_x_continuous(
breaks=c(1,2,3), labels=c('0-14', '15-64', '65+'))
}
Age_distribution_plot('South Africa')
Age_distribution_plot('China')
Age_distribution_plot <- function(country_,age_dist=age_dist) {
# create data
x <- age_dist[age_dist$`Country Name`==country_,]
x <- data.frame(rbind(rbind(
cbind(value=x$`00-14`, group=1),
cbind(value=x$`15-64`, group=2)
),
cbind(value=x$`65+`, group=3)))
ggplot(x, aes(x=group, y=value)) +
geom_point(size=3, col=colour_cases) +
geom_segment(aes(x=group, xend=group, y=0, yend=value), col=colour_cases) +
stat_smooth(geom='line', col=colour_cases) +
theme_minimal() + xlab('Age') + ylab('Percent of Population') + ggtitle(paste('Age Distribution of', country_)) +
scale_x_continuous(
breaks=c(1,2,3), labels=c('0-14', '15-64', '65+'))
}
Age_distribution_plot('China',age_dist)
country_ = 'China'
ggplot(x, aes(x=group, y=value)) +
geom_point(size=3, col=colour_cases) +
geom_segment(aes(x=group, xend=group, y=0, yend=value), col=colour_cases) +
stat_smooth(geom='line', col=colour_cases) +
theme_minimal() + xlab('Age') + ylab('Percent of Population') + ggtitle(paste('Age Distribution of', country_)) +
scale_x_continuous(
breaks=c(1,2,3), labels=c('0-14', '15-64', '65+'))
country_ = 'South Africa'
ggplot(x, aes(x=group, y=value)) +
geom_point(size=3, col=colour_cases) +
geom_segment(aes(x=group, xend=group, y=0, yend=value), col=colour_cases) +
stat_smooth(geom='line', col=colour_cases) +
theme_minimal() + xlab('Age') + ylab('Percent of Population') + ggtitle(paste('Age Distribution of', country_)) +
scale_x_continuous(
breaks=c(1,2,3), labels=c('0-14', '15-64', '65+'))
country_ = 'South Africa'
# create data
x <- age_dist[age_dist$`Country Name`==country_,]
x <- data.frame(rbind(rbind(
cbind(value=x$`00-14`, group=1),
cbind(value=x$`15-64`, group=2)
),
cbind(value=x$`65+`, group=3)))
ggplot(x, aes(x=group, y=value)) +
geom_point(size=3, col=colour_cases) +
geom_segment(aes(x=group, xend=group, y=0, yend=value), col=colour_cases) +
stat_smooth(geom='line', col=colour_cases) +
theme_minimal() + xlab('Age') + ylab('Percent of Population') + ggtitle(paste('Age Distribution of', country_)) +
scale_x_continuous(
breaks=c(1,2,3), labels=c('0-14', '15-64', '65+'))
country_ = 'Italy'
# create data
x <- age_dist[age_dist$`Country Name`==country_,]
x <- data.frame(rbind(rbind(
cbind(value=x$`00-14`, group=1),
cbind(value=x$`15-64`, group=2)
),
cbind(value=x$`65+`, group=3)))
ggplot(x, aes(x=group, y=value)) +
geom_point(size=3, col=colour_cases) +
geom_segment(aes(x=group, xend=group, y=0, yend=value), col=colour_cases) +
stat_smooth(geom='line', col=colour_cases) +
theme_minimal() + xlab('Age') + ylab('Percent of Population') + ggtitle(paste('Age Distribution of', country_)) +
scale_x_continuous(
breaks=c(1,2,3), labels=c('0-14', '15-64', '65+'))
age_dist <- read_csv('data/age_dist.csv')
Age_distribution_plot <- function(country_, age_dist=age_dist) {
# create data
x <- age_dist[age_dist$`Country Name`==country_,]
x <- data.frame(rbind(rbind(
cbind(value=x$`00-14`, group=1),
cbind(value=x$`15-64`, group=2)
),
cbind(value=x$`65+`, group=3)))
ggplot(x, aes(x=group, y=value)) +
geom_point(size=3, col=colour_cases) +
geom_segment(aes(x=group, xend=group, y=0, yend=value), col=colour_cases) +
stat_smooth(geom='line', col=colour_cases) +
theme_minimal() + xlab('Age') + ylab('Percent of Population') + ggtitle(paste('Age Distribution of', country_)) +
scale_x_continuous(
breaks=c(1,2,3), labels=c('0-14', '15-64', '65+'))
}
Age_distribution_plot('China',age_dist)
sp500_url <- 'https://za.investing.com/indices/us-spx-500-futures-historical-data'
sp500 <<- read_html(sp500_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
sa40_url <- 'https://za.investing.com/indices/south-africa-40-futures-historical-data'
sa40 <<- read_html(sa40_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
nasdaq_url <- 'https://za.investing.com/indices/nq-100-futures-historical-data'
nasdaq <<- read_html(nasdaq_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
london_url <- 'https://za.investing.com/equities/london-stock-exchange-historical-data'
london <<- read_html(london_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
nyse_url <- 'https://za.investing.com/indices/nyse-composite-historical-data'
nyse <<- read_html(nyse_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
ftse_url <- 'https://za.investing.com/indices/uk-100-historical-data'
ftse <<- read_html(ftse_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
hk50_url <- 'https://za.investing.com/indices/hang-sen-40-historical-data'
hk50 <<- read_html(hk50_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
gold_url <- 'https://za.investing.com/commodities/gold-historical-data'
gold <<- read_html(gold_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
zar_url <- 'https://za.investing.com/currencies/usd-zar-historical-data'
zar <<- read_html(zar_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[1]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
btc_url <- 'https://za.investing.com/crypto/bitcoin/btc-usd-historical-data'
btc <<- read_html(btc_url) %>% html_node(xpath= '//*[@id="curr_table"]') %>% html_table(fill = T)
sp500
source('~/Desktop/fin_data.R', echo=TRUE)
zar
source('~/Desktop/fin_data_2.R', echo=TRUE)
zar
#_______________________________________ SCRAPE WORLDOMETERS _____________________________________
# Script to scrape summary data from 'https://www.worldometers.info/coronavirus/' and remove commas.
library(rvest)
worldometer_url <- 'https://www.worldometers.info/coronavirus/'
worldometer <<- read_html(worldometer_url) %>% html_node(xpath='//*[@id="main_table_countries_today"]') %>% html_table(fill=T)
worldometer$TotalCases <- as.numeric(gsub(",","",worldometer$TotalCases))
worldometer$NewCases <- as.numeric(gsub(",","",worldometer$NewCases))
worldometer$TotalDeaths <- as.numeric(gsub(",","",worldometer$TotalDeaths))
worldometer$TotalCases <- as.numeric(gsub(",","",worldometer$TotalCases))
worldometer$NewDeaths <- as.numeric(gsub(",","",worldometer$NewDeaths))
worldometer$NewCases <- as.numeric(gsub(",","",worldometer$NewCases))
worldometer$TotalRecovered <- as.numeric(gsub(",","",worldometer$TotalRecovered))
worldometer$ActiveCases <- as.numeric(gsub(",","",worldometer$ActiveCases))
worldometer$`Serious,Critical` <- as.numeric(gsub(",","",worldometer$`Serious,Critical`))
worldometer$`Tot Cases/1M pop` <- as.numeric(gsub(",","",worldometer$`Tot Cases/1M pop`))
write.csv(worldometer, "worldometer_clean.csv")
worldometer
names(worldometer)
worldometer[worldometer$`Country,Other`=='South Africa',]
worldometer[worldometer$`Country,Other`=='South Africa',]
get_data <- function() {
# run to fetch & clean all the data
# ______________________________ South African Data ______________________________
# provincial data
province <- c('Western Cape','Eastern Cape','Northern Cape', 'Free State', 'KwaZulu-Natal', 'North West',
'Gauteng', 'Mpumalanga', 'Limpopo')
population <- c(6621103, 6522734, 1225555, 2954348, 11384722, 3978955, 14717040, 4523874, 5797275)
population_2 <- paste(round(population/1000000, 2), 'm', sep='')
density <- c(51.1, 38.6, 3.3, 22.8, 120.7, 37.9, 809.6, 59.1, 46.1)
provincial.data <- data.frame(province, population, population_2, density, stringsAsFactors=FALSE)
# --- Add later ---               # Gender & Age demographics
Age <- c('0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80+')
Male <- c('5 292 766','4 842 847','5 237 328','3 754 553','2 598 068','1 823 299','1 013 912','458 781','176 237')
Female <- c('5 212 437', '4 755 516', '5 196 531', '2 751 224', '2 970 834', '2 192 398', '1 329 660', '770 816', '402 352')
total <- c('10 505 203','9 598 363','10 433 859','6 505 777','5 568 902','4 015 697','2 343 572','1 229 597','419 989' )
age.data <- data.frame(Age, Male, Female,total, stringsAsFactors=FALSE)
# --- Add later ---
# Get South African Covid Data
covid_sa_url <- 'https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_South_Africa'
covid_sa <<- read_html(covid_sa_url) %>% html_node(xpath='//*[@id="mw-content-text"]/div/table[3]') %>% html_table(fill=T)
# geospatial data
south_africa <<- readShapeSpatial('data/gadm36_ZAF_shp/gadm36_ZAF_1.shp')
south_africa <<- rgdal::readOGR('data/gadm36_ZAF_shp/gadm36_ZAF_1.shp')
# ______________________________ South African Data ______________________________
# _________________________________ Concatenate Data _________________________________
# Extract number of cases
test <- t(covid_sa[covid_sa$Day=='Cases',3:11])
test <- data.frame(test[1:nrow(test),])
colnames(test) <- 'Cases'
test$Cases <- as.numeric(as.character(test$Cases))
# add to dataframe
south_africa@data <<- cbind(test, south_africa@data)
# province data
south_africa@data <<- merge(south_africa@data, provincial.data, by.x='NAME_1', by.y='province')
# _________________________________ Concatenate Data _________________________________
# _________________________________ Global Data _________________________________
# global case data
n_cases <<- load_nCov2019(lang='en')
# median population data
med_age <<- read.csv('data/median-age.csv')
# clean
med_age <<- group_by(med_age, Entity) %>% filter(Year==2020) %>%
transmute(name=factor(Entity),
code=Code,
country=Entity,
median_age=UN.Population.Division..Median.Age...2017...years.)
# Global Population Data
global_population <<- read.csv('./data/global_population.csv')
# _________________________________ Global Data _________________________________
# _________________________________ Worldometer Data _________________________________
# Script to scrape summary data from 'https://www.worldometers.info/coronavirus/' and remove commas.
worldometer_url <- 'https://www.worldometers.info/coronavirus/'
worldometer <<- read_html(worldometer_url) %>% html_node(xpath='//*[@id="main_table_countries_today"]') %>% html_table(fill=T)
worldometer$TotalCases <- as.numeric(gsub(",","",worldometer$TotalCases))
worldometer$NewCases <- as.numeric(gsub(",","",worldometer$NewCases))
worldometer$TotalDeaths <- as.numeric(gsub(",","",worldometer$TotalDeaths))
worldometer$TotalCases <- as.numeric(gsub(",","",worldometer$TotalCases))
worldometer$NewDeaths <- as.numeric(gsub(",","",worldometer$NewDeaths))
worldometer$NewCases <- as.numeric(gsub(",","",worldometer$NewCases))
worldometer$TotalRecovered <- as.numeric(gsub(",","",worldometer$TotalRecovered))
worldometer$ActiveCases <- as.numeric(gsub(",","",worldometer$ActiveCases))
worldometer$`Serious,Critical` <- as.numeric(gsub(",","",worldometer$`Serious,Critical`))
worldometer$`Tot Cases/1M pop` <<- as.numeric(gsub(",","",worldometer$`Tot Cases/1M pop`))
# _________________________________ Worldometer Data _________________________________
# _________________________________ World Map Data _________________________________
data("World")
# clean case data
case_data <- n_cases$global %>% group_by(country) %>%
summarise(cases=max(cum_confirm),
cum_heal=max(cum_heal),
cum_dead=max(cum_dead)) %>%
mutate(name=factor(country))
world <<- merge(World, case_data, by='name')                           # merge case data
world <<- merge(world, med_age, by='name')                             # merge median age data
world <<- merge(world, global_population, by='name', all.x=TRUE)       # add global population data
}
worldometer[worldometer$`Country,Other`=='South Africa',]$TotalCases
worldometer[worldometer$`Country,Other`=='South Africa',]$TotalDeaths
is.na(d)
d <- worldometer[worldometer$`Country,Other`=='South Africa',]$TotalDeaths
is.na(d)
is.na(d) <- 0
d
d[is.na(d)]=0
d
d=1
d[is.na(d)]=0
d
worldometer[worldometer$`Country,Other`=='South Africa',]$TotalCases
# ___________________________________ Install Dependencies & Curate Data ___________________________________
configure_workspace <- function() {
# Dependencies
# remotes::install_github("GuangchuangYu/nCov2019")
library(flexdashboard)
library(shiny)
library(tidyverse)
library(coronavirus)
library(sf)
library(raster)
library(htmltab)
library(tmap)
library(leaflet)
library(ggplot2)
library(maptools)
library(rvest)
library(RColorBrewer)
library(htmlwidgets)
library(ggrepel)
library(nCov2019)
library(chinamap)
library(plotly)
library(tidyr)
library(ggrepel)
library(rgdal)
library(readxl)
setwd("~/Desktop/covid19")
}
get_data <- function() {
# run to fetch & clean all the data
# ______________________________ South African Data ______________________________
# provincial data
province <- c('Western Cape','Eastern Cape','Northern Cape', 'Free State', 'KwaZulu-Natal', 'North West',
'Gauteng', 'Mpumalanga', 'Limpopo')
population <- c(6621103, 6522734, 1225555, 2954348, 11384722, 3978955, 14717040, 4523874, 5797275)
population_2 <- paste(round(population/1000000, 2), 'm', sep='')
density <- c(51.1, 38.6, 3.3, 22.8, 120.7, 37.9, 809.6, 59.1, 46.1)
provincial.data <- data.frame(province, population, population_2, density, stringsAsFactors=FALSE)
# --- Add later ---               # Gender & Age demographics
Age <- c('0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80+')
Male <- c('5 292 766','4 842 847','5 237 328','3 754 553','2 598 068','1 823 299','1 013 912','458 781','176 237')
Female <- c('5 212 437', '4 755 516', '5 196 531', '2 751 224', '2 970 834', '2 192 398', '1 329 660', '770 816', '402 352')
total <- c('10 505 203','9 598 363','10 433 859','6 505 777','5 568 902','4 015 697','2 343 572','1 229 597','419 989' )
age.data <- data.frame(Age, Male, Female,total, stringsAsFactors=FALSE)
# --- Add later ---
# Get South African Covid Data
covid_sa_url <- 'https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_South_Africa'
covid_sa <<- read_html(covid_sa_url) %>% html_node(xpath='//*[@id="mw-content-text"]/div/table[3]') %>% html_table(fill=T)
# geospatial data
south_africa <<- readShapeSpatial('data/gadm36_ZAF_shp/gadm36_ZAF_1.shp')
south_africa <<- rgdal::readOGR('data/gadm36_ZAF_shp/gadm36_ZAF_1.shp')
# ______________________________ South African Data ______________________________
# _________________________________ Concatenate Data _________________________________
# Extract number of cases
test <- t(covid_sa[covid_sa$Day=='Cases',3:11])
test <- data.frame(test[1:nrow(test),])
colnames(test) <- 'Cases'
test$Cases <- as.numeric(as.character(test$Cases))
# add to dataframe
south_africa@data <<- cbind(test, south_africa@data)
# province data
south_africa@data <<- merge(south_africa@data, provincial.data, by.x='NAME_1', by.y='province')
# _________________________________ Concatenate Data _________________________________
# _________________________________ Global Data _________________________________
# global case data
n_cases <<- load_nCov2019(lang='en')
# median population data
med_age <<- read.csv('data/median-age.csv')
# clean
med_age <<- group_by(med_age, Entity) %>% filter(Year==2020) %>%
transmute(name=factor(Entity),
code=Code,
country=Entity,
median_age=UN.Population.Division..Median.Age...2017...years.)
# Global Population Data
global_population <<- read.csv('./data/global_population.csv')
# _________________________________ Global Data _________________________________
# _________________________________ Worldometer Data _________________________________
# Script to scrape summary data from 'https://www.worldometers.info/coronavirus/' and remove commas.
worldometer_url <- 'https://www.worldometers.info/coronavirus/'
worldometer <<- read_html(worldometer_url) %>% html_node(xpath='//*[@id="main_table_countries_today"]') %>% html_table(fill=T)
worldometer$TotalCases <- as.numeric(gsub(",","",worldometer$TotalCases))
worldometer$NewCases <- as.numeric(gsub(",","",worldometer$NewCases))
worldometer$TotalDeaths <- as.numeric(gsub(",","",worldometer$TotalDeaths))
worldometer$TotalCases <- as.numeric(gsub(",","",worldometer$TotalCases))
worldometer$NewDeaths <- as.numeric(gsub(",","",worldometer$NewDeaths))
worldometer$NewCases <- as.numeric(gsub(",","",worldometer$NewCases))
worldometer$TotalRecovered <- as.numeric(gsub(",","",worldometer$TotalRecovered))
worldometer$ActiveCases <- as.numeric(gsub(",","",worldometer$ActiveCases))
worldometer$`Serious,Critical` <- as.numeric(gsub(",","",worldometer$`Serious,Critical`))
worldometer$`Tot Cases/1M pop` <<- as.numeric(gsub(",","",worldometer$`Tot Cases/1M pop`))
# _________________________________ Worldometer Data _________________________________
# _________________________________ World Map Data _________________________________
data("World")
# clean case data
case_data <- n_cases$global %>% group_by(country) %>%
summarise(cases=max(cum_confirm),
cum_heal=max(cum_heal),
cum_dead=max(cum_dead)) %>%
mutate(name=factor(country))
world <<- merge(World, case_data, by='name')                           # merge case data
world <<- merge(world, med_age, by='name')                             # merge median age data
world <<- merge(world, global_population, by='name', all.x=TRUE)       # add global population data
}
get_data()
worldometer[worldometer$`Country,Other`=='South Africa',]$TotalCases
as.numeric(worldometer[worldometer$`Country,Other`=='South Africa',]$TotalCases)
as.numeric(worldometer[worldometer$`Country,Other`=='South Africa',]$TotalDeaths)
as.numeric(worldometer[worldometer$`Country,Other`=='South Africa',]$TotalRecovered)
sp500_url <- 'https://za.investing.com/indices/us-spx-500-futures-historical-data'
sp500 <<- read_html(sp500_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
sa40_url <- 'https://za.investing.com/indices/south-africa-40-futures-historical-data'
sa40 <<- read_html(sa40_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
nasdaq_url <- 'https://za.investing.com/indices/nq-100-futures-historical-data'
nasdaq <<- read_html(nasdaq_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
london_url <- 'https://za.investing.com/equities/london-stock-exchange-historical-data'
london <<- read_html(london_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
nyse_url <- 'https://za.investing.com/indices/nyse-composite-historical-data'
nyse <<- read_html(nyse_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
ftse_url <- 'https://za.investing.com/indices/uk-100-historical-data'
ftse <<- read_html(ftse_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
hk50_url <- 'https://za.investing.com/indices/hang-sen-40-historical-data'
hk50 <<- read_html(hk50_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
gold_url <- 'https://za.investing.com/commodities/gold-historical-data'
gold <<- read_html(gold_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[2]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
zar_url <- 'https://za.investing.com/currencies/usd-zar-historical-data'
zar <<- read_html(zar_url) %>% html_node(xpath='//*[@id="js-main-container"]/section[1]/div/section[2]/section[2]/div[1]/div/table') %>% html_table(fill = T)
btc_url <- 'https://za.investing.com/crypto/bitcoin/btc-usd-historical-data'
btc <<- read_html(btc_url) %>% html_node(xpath= '//*[@id="curr_table"]') %>% html_table(fill = T)
#_____________________________ Scrape financial data ______________________________________
sp500
sp500[c('Date', 'Price', )]
sp500
names(sp500)
sp500[c('Date', 'Price')]
sp500$ind <- 'sp500'
sp500
sp500$indx <- 'sp500'
sp500 <- sp500[c('Date', 'Price', 'indx')]
btc$indx <- 'btc'
btc <- btc[c('Date', 'Price', 'indx')]
ftse$indx <- 'ftse'
ftse <- ftse[c('Date', 'Price', 'indx')]
gold$indx <- 'gold'
gold <- gold[c('Date', 'Price', 'indx')]
hk50$indx <- 'hk50'
hk50 <- hk50[c('Date', 'Price', 'indx')]
london$indx <- 'london'
london <- london[c('Date', 'Price', 'indx')]
nasdaq$indx <- 'nasdaq'
nasdaq <- nasdaq[c('Date', 'Price', 'indx')]
nyse$indx <- 'nyse'
nyse <- nyse[c('Date', 'Price', 'indx')]
sa40$indx <- 'sa40'
sa40 <- sa40[c('Date', 'Price', 'indx')]
zar$indx <- 'zar'
zar <- zar[c('Date', 'Price', 'indx')]
sp500
merge(sp500, btc, by='Date')
rbind(sp500,btc,ftse,gold,hk50,london,nasdaq,nyse,sa40,zar)
data.frame(
rbind(sp500,btc,ftse,gold,hk50,london,nasdaq,nyse,sa40,zar)
)
ggplot(data, aes(x=Date, y=Price, fill=indx)) +
geom_smooth()
data <- data.frame(rbind(sp500,btc,ftse,gold,hk50,london,nasdaq,nyse,sa40,zar))
ggplot(data, aes(x=Date, y=Price, fill=indx)) +
geom_smooth()
ggplot(data, aes(x=as.Date(Date), y=Price, fill=indx)) +
geom_smooth()
data$Date
as.Date(data$Date)
as.Date(data$Date, format='%b %d, %Y')
data <- data.frame(rbind(sp500,btc,ftse,gold,hk50,london,nasdaq,nyse,sa40,zar))
data$Date <- as.Date(data$Date, format='%b %d, %Y')
ggplot(data, aes(x=as.Date(Date), y=Price, fill=indx)) +
geom_smooth()
ggplot(data, aes(x=Date, y=Price, fill=indx)) +
geom_smooth()
ggplot(data, aes(x=Date, y=Price, fill=indx)) +
geom_point()
ggplot(data, aes(x=Date, y=Price)) +
geom_point(fill=indx)
ggplot(data, aes(x=Date, y=Price)) +
geom_point(fill=indx)
ggplot(data, aes(x=Date, y=Price), col=indx) +
geom_point()
ggplot(data, aes(x=Date, y=Price), col=as.factor(indx)) +
geom_point()
head(data)
data$indx=='sp500'
data[data$indx=='sp500',] %>%
ggplot(aes(x=Date, y=Price)) + geom_smooth()
head(data)
data$Price
rep(',', '', data$Price)
rep(',', '', data$Price)
?rep
sub(',', '', data$Price)
as.numeric(sub(',', '', data$Price))
data$Price <- as.numeric(sub(',', '', data$Price))                               # convert to double
ggplot(data, aes(x=Date, y=Price), col=indx) +
geom_point()
data %>% group_by(indx)
data %>% group_by(indx) %>% mutate(std_price = (Price-min(Price))/max(Price))
data
data %>% group_by(indx) %>% mutate(std_price = (Price-min(Price))/max(Price))
# standarize prices
data <- data %>% group_by(indx) %>% mutate(std_price = (Price-min(Price))/max(Price))
data[data$indx=='sp500',] %>%
ggplot(aes(x=Date, y=Price)) + geom_smooth()
data[data$indx=='sp500',] %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + geom_smooth()
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + geom_smooth()
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank())
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank()) +
geom_smooth()
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.title.y = element_blank()) +
geom_smooth()
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.line.y = element_blank()) +
geom_smooth()
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.line.y = element_blank()) +
geom_smooth()
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_smooth()
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_line()
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_line(fill=indx)
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_line(aes(x=Date, y=std_price, fill=indx))
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_line(aes(x=Date, y=std_price, col=indx))
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_line(aes(x=Date, y=std_price, col=indx), '-')
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_line(aes(x=Date, y=std_price, col=indx), '-o')
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_line(col=indx)
data %>%
ggplot(aes(x=Date, y=std_price, fill=indx)) + ggtitle('Global Markets') +
ylab('Price') + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
geom_line(aes(x=Date, y=std_price, col=indx)) + theme_minimal()
ggplot()
ggplot() + theme_minimal()
data
unique(data$indx)
ggplot() + theme_minimal() ggtitle('null')
ggplot() + theme_minimal() +  ggtitle('null')
